/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tencent.tsf.femas.config.thrift.paas;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-08-03")
public class InitNamespaceRequest implements org.apache.thrift.TBase<InitNamespaceRequest, InitNamespaceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<InitNamespaceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InitNamespaceRequest");

  private static final org.apache.thrift.protocol.TField NAMESPACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("namespaceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTRY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("registryAddress", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InitNamespaceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InitNamespaceRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String namespaceId; // required
  public @org.apache.thrift.annotation.Nullable String registryAddress; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAMESPACE_ID((short)1, "namespaceId"),
    REGISTRY_ADDRESS((short)2, "registryAddress");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAMESPACE_ID
          return NAMESPACE_ID;
        case 2: // REGISTRY_ADDRESS
          return REGISTRY_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAMESPACE_ID, new org.apache.thrift.meta_data.FieldMetaData("namespaceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTRY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("registryAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InitNamespaceRequest.class, metaDataMap);
  }

  public InitNamespaceRequest() {
  }

  public InitNamespaceRequest(
    String namespaceId,
    String registryAddress)
  {
    this();
    this.namespaceId = namespaceId;
    this.registryAddress = registryAddress;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InitNamespaceRequest(InitNamespaceRequest other) {
    if (other.isSetNamespaceId()) {
      this.namespaceId = other.namespaceId;
    }
    if (other.isSetRegistryAddress()) {
      this.registryAddress = other.registryAddress;
    }
  }

  public InitNamespaceRequest deepCopy() {
    return new InitNamespaceRequest(this);
  }

  @Override
  public void clear() {
    this.namespaceId = null;
    this.registryAddress = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getNamespaceId() {
    return this.namespaceId;
  }

  public InitNamespaceRequest setNamespaceId(@org.apache.thrift.annotation.Nullable String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

  public void unsetNamespaceId() {
    this.namespaceId = null;
  }

  /** Returns true if field namespaceId is set (has been assigned a value) and false otherwise */
  public boolean isSetNamespaceId() {
    return this.namespaceId != null;
  }

  public void setNamespaceIdIsSet(boolean value) {
    if (!value) {
      this.namespaceId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getRegistryAddress() {
    return this.registryAddress;
  }

  public InitNamespaceRequest setRegistryAddress(@org.apache.thrift.annotation.Nullable String registryAddress) {
    this.registryAddress = registryAddress;
    return this;
  }

  public void unsetRegistryAddress() {
    this.registryAddress = null;
  }

  /** Returns true if field registryAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistryAddress() {
    return this.registryAddress != null;
  }

  public void setRegistryAddressIsSet(boolean value) {
    if (!value) {
      this.registryAddress = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case NAMESPACE_ID:
      if (value == null) {
        unsetNamespaceId();
      } else {
        setNamespaceId((String)value);
      }
      break;

    case REGISTRY_ADDRESS:
      if (value == null) {
        unsetRegistryAddress();
      } else {
        setRegistryAddress((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAMESPACE_ID:
      return getNamespaceId();

    case REGISTRY_ADDRESS:
      return getRegistryAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAMESPACE_ID:
      return isSetNamespaceId();
    case REGISTRY_ADDRESS:
      return isSetRegistryAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof InitNamespaceRequest)
      return this.equals((InitNamespaceRequest)that);
    return false;
  }

  public boolean equals(InitNamespaceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_namespaceId = true && this.isSetNamespaceId();
    boolean that_present_namespaceId = true && that.isSetNamespaceId();
    if (this_present_namespaceId || that_present_namespaceId) {
      if (!(this_present_namespaceId && that_present_namespaceId))
        return false;
      if (!this.namespaceId.equals(that.namespaceId))
        return false;
    }

    boolean this_present_registryAddress = true && this.isSetRegistryAddress();
    boolean that_present_registryAddress = true && that.isSetRegistryAddress();
    if (this_present_registryAddress || that_present_registryAddress) {
      if (!(this_present_registryAddress && that_present_registryAddress))
        return false;
      if (!this.registryAddress.equals(that.registryAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNamespaceId()) ? 131071 : 524287);
    if (isSetNamespaceId())
      hashCode = hashCode * 8191 + namespaceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegistryAddress()) ? 131071 : 524287);
    if (isSetRegistryAddress())
      hashCode = hashCode * 8191 + registryAddress.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(InitNamespaceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetNamespaceId(), other.isSetNamespaceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNamespaceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.namespaceId, other.namespaceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetRegistryAddress(), other.isSetRegistryAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistryAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registryAddress, other.registryAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InitNamespaceRequest(");
    boolean first = true;

    sb.append("namespaceId:");
    if (this.namespaceId == null) {
      sb.append("null");
    } else {
      sb.append(this.namespaceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("registryAddress:");
    if (this.registryAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.registryAddress);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (namespaceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'namespaceId' was not present! Struct: " + toString());
    }
    if (registryAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'registryAddress' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InitNamespaceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InitNamespaceRequestStandardScheme getScheme() {
      return new InitNamespaceRequestStandardScheme();
    }
  }

  private static class InitNamespaceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<InitNamespaceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InitNamespaceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAMESPACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.namespaceId = iprot.readString();
              struct.setNamespaceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTRY_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registryAddress = iprot.readString();
              struct.setRegistryAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InitNamespaceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.namespaceId != null) {
        oprot.writeFieldBegin(NAMESPACE_ID_FIELD_DESC);
        oprot.writeString(struct.namespaceId);
        oprot.writeFieldEnd();
      }
      if (struct.registryAddress != null) {
        oprot.writeFieldBegin(REGISTRY_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.registryAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InitNamespaceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InitNamespaceRequestTupleScheme getScheme() {
      return new InitNamespaceRequestTupleScheme();
    }
  }

  private static class InitNamespaceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<InitNamespaceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InitNamespaceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.namespaceId);
      oprot.writeString(struct.registryAddress);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InitNamespaceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.namespaceId = iprot.readString();
      struct.setNamespaceIdIsSet(true);
      struct.registryAddress = iprot.readString();
      struct.setRegistryAddressIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

