/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tencent.tsf.femas.config.thrift.paas;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-08-03")
public class PaasPolling {

  public interface Iface {

    public PollingResult fetchBreakerRule(SimpleParam simpleParam) throws org.apache.thrift.TException;

    public PollingResult reportServiceApi(ServiceApiRequest serviceApiRequest) throws org.apache.thrift.TException;

    public PollingResult reportServiceEvent(ReportEventRequest reportEventRequest) throws org.apache.thrift.TException;

    public PollingResult initNamespace(InitNamespaceRequest initNamespaceRequest) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void fetchBreakerRule(SimpleParam simpleParam, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException;

    public void reportServiceApi(ServiceApiRequest serviceApiRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException;

    public void reportServiceEvent(ReportEventRequest reportEventRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException;

    public void initNamespace(InitNamespaceRequest initNamespaceRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PollingResult fetchBreakerRule(SimpleParam simpleParam) throws org.apache.thrift.TException
    {
      send_fetchBreakerRule(simpleParam);
      return recv_fetchBreakerRule();
    }

    public void send_fetchBreakerRule(SimpleParam simpleParam) throws org.apache.thrift.TException
    {
      fetchBreakerRule_args args = new fetchBreakerRule_args();
      args.setSimpleParam(simpleParam);
      sendBase("fetchBreakerRule", args);
    }

    public PollingResult recv_fetchBreakerRule() throws org.apache.thrift.TException
    {
      fetchBreakerRule_result result = new fetchBreakerRule_result();
      receiveBase(result, "fetchBreakerRule");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchBreakerRule failed: unknown result");
    }

    public PollingResult reportServiceApi(ServiceApiRequest serviceApiRequest) throws org.apache.thrift.TException
    {
      send_reportServiceApi(serviceApiRequest);
      return recv_reportServiceApi();
    }

    public void send_reportServiceApi(ServiceApiRequest serviceApiRequest) throws org.apache.thrift.TException
    {
      reportServiceApi_args args = new reportServiceApi_args();
      args.setServiceApiRequest(serviceApiRequest);
      sendBase("reportServiceApi", args);
    }

    public PollingResult recv_reportServiceApi() throws org.apache.thrift.TException
    {
      reportServiceApi_result result = new reportServiceApi_result();
      receiveBase(result, "reportServiceApi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportServiceApi failed: unknown result");
    }

    public PollingResult reportServiceEvent(ReportEventRequest reportEventRequest) throws org.apache.thrift.TException
    {
      send_reportServiceEvent(reportEventRequest);
      return recv_reportServiceEvent();
    }

    public void send_reportServiceEvent(ReportEventRequest reportEventRequest) throws org.apache.thrift.TException
    {
      reportServiceEvent_args args = new reportServiceEvent_args();
      args.setReportEventRequest(reportEventRequest);
      sendBase("reportServiceEvent", args);
    }

    public PollingResult recv_reportServiceEvent() throws org.apache.thrift.TException
    {
      reportServiceEvent_result result = new reportServiceEvent_result();
      receiveBase(result, "reportServiceEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportServiceEvent failed: unknown result");
    }

    public PollingResult initNamespace(InitNamespaceRequest initNamespaceRequest) throws org.apache.thrift.TException
    {
      send_initNamespace(initNamespaceRequest);
      return recv_initNamespace();
    }

    public void send_initNamespace(InitNamespaceRequest initNamespaceRequest) throws org.apache.thrift.TException
    {
      initNamespace_args args = new initNamespace_args();
      args.setInitNamespaceRequest(initNamespaceRequest);
      sendBase("initNamespace", args);
    }

    public PollingResult recv_initNamespace() throws org.apache.thrift.TException
    {
      initNamespace_result result = new initNamespace_result();
      receiveBase(result, "initNamespace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initNamespace failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void fetchBreakerRule(SimpleParam simpleParam, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchBreakerRule_call method_call = new fetchBreakerRule_call(simpleParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchBreakerRule_call extends org.apache.thrift.async.TAsyncMethodCall<PollingResult> {
      private SimpleParam simpleParam;
      public fetchBreakerRule_call(SimpleParam simpleParam, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.simpleParam = simpleParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchBreakerRule", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchBreakerRule_args args = new fetchBreakerRule_args();
        args.setSimpleParam(simpleParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PollingResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchBreakerRule();
      }
    }

    public void reportServiceApi(ServiceApiRequest serviceApiRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportServiceApi_call method_call = new reportServiceApi_call(serviceApiRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportServiceApi_call extends org.apache.thrift.async.TAsyncMethodCall<PollingResult> {
      private ServiceApiRequest serviceApiRequest;
      public reportServiceApi_call(ServiceApiRequest serviceApiRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceApiRequest = serviceApiRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportServiceApi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportServiceApi_args args = new reportServiceApi_args();
        args.setServiceApiRequest(serviceApiRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PollingResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportServiceApi();
      }
    }

    public void reportServiceEvent(ReportEventRequest reportEventRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportServiceEvent_call method_call = new reportServiceEvent_call(reportEventRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportServiceEvent_call extends org.apache.thrift.async.TAsyncMethodCall<PollingResult> {
      private ReportEventRequest reportEventRequest;
      public reportServiceEvent_call(ReportEventRequest reportEventRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportEventRequest = reportEventRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportServiceEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportServiceEvent_args args = new reportServiceEvent_args();
        args.setReportEventRequest(reportEventRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PollingResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportServiceEvent();
      }
    }

    public void initNamespace(InitNamespaceRequest initNamespaceRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initNamespace_call method_call = new initNamespace_call(initNamespaceRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initNamespace_call extends org.apache.thrift.async.TAsyncMethodCall<PollingResult> {
      private InitNamespaceRequest initNamespaceRequest;
      public initNamespace_call(InitNamespaceRequest initNamespaceRequest, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.initNamespaceRequest = initNamespaceRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initNamespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initNamespace_args args = new initNamespace_args();
        args.setInitNamespaceRequest(initNamespaceRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PollingResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initNamespace();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("fetchBreakerRule", new fetchBreakerRule());
      processMap.put("reportServiceApi", new reportServiceApi());
      processMap.put("reportServiceEvent", new reportServiceEvent());
      processMap.put("initNamespace", new initNamespace());
      return processMap;
    }

    public static class fetchBreakerRule<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchBreakerRule_args> {
      public fetchBreakerRule() {
        super("fetchBreakerRule");
      }

      public fetchBreakerRule_args getEmptyArgsInstance() {
        return new fetchBreakerRule_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public fetchBreakerRule_result getResult(I iface, fetchBreakerRule_args args) throws org.apache.thrift.TException {
        fetchBreakerRule_result result = new fetchBreakerRule_result();
        result.success = iface.fetchBreakerRule(args.simpleParam);
        return result;
      }
    }

    public static class reportServiceApi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportServiceApi_args> {
      public reportServiceApi() {
        super("reportServiceApi");
      }

      public reportServiceApi_args getEmptyArgsInstance() {
        return new reportServiceApi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reportServiceApi_result getResult(I iface, reportServiceApi_args args) throws org.apache.thrift.TException {
        reportServiceApi_result result = new reportServiceApi_result();
        result.success = iface.reportServiceApi(args.serviceApiRequest);
        return result;
      }
    }

    public static class reportServiceEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportServiceEvent_args> {
      public reportServiceEvent() {
        super("reportServiceEvent");
      }

      public reportServiceEvent_args getEmptyArgsInstance() {
        return new reportServiceEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reportServiceEvent_result getResult(I iface, reportServiceEvent_args args) throws org.apache.thrift.TException {
        reportServiceEvent_result result = new reportServiceEvent_result();
        result.success = iface.reportServiceEvent(args.reportEventRequest);
        return result;
      }
    }

    public static class initNamespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initNamespace_args> {
      public initNamespace() {
        super("initNamespace");
      }

      public initNamespace_args getEmptyArgsInstance() {
        return new initNamespace_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public initNamespace_result getResult(I iface, initNamespace_args args) throws org.apache.thrift.TException {
        initNamespace_result result = new initNamespace_result();
        result.success = iface.initNamespace(args.initNamespaceRequest);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("fetchBreakerRule", new fetchBreakerRule());
      processMap.put("reportServiceApi", new reportServiceApi());
      processMap.put("reportServiceEvent", new reportServiceEvent());
      processMap.put("initNamespace", new initNamespace());
      return processMap;
    }

    public static class fetchBreakerRule<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchBreakerRule_args, PollingResult> {
      public fetchBreakerRule() {
        super("fetchBreakerRule");
      }

      public fetchBreakerRule_args getEmptyArgsInstance() {
        return new fetchBreakerRule_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PollingResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PollingResult>() { 
          public void onComplete(PollingResult o) {
            fetchBreakerRule_result result = new fetchBreakerRule_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchBreakerRule_result result = new fetchBreakerRule_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchBreakerRule_args args, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
        iface.fetchBreakerRule(args.simpleParam,resultHandler);
      }
    }

    public static class reportServiceApi<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportServiceApi_args, PollingResult> {
      public reportServiceApi() {
        super("reportServiceApi");
      }

      public reportServiceApi_args getEmptyArgsInstance() {
        return new reportServiceApi_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PollingResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PollingResult>() { 
          public void onComplete(PollingResult o) {
            reportServiceApi_result result = new reportServiceApi_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reportServiceApi_result result = new reportServiceApi_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportServiceApi_args args, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
        iface.reportServiceApi(args.serviceApiRequest,resultHandler);
      }
    }

    public static class reportServiceEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportServiceEvent_args, PollingResult> {
      public reportServiceEvent() {
        super("reportServiceEvent");
      }

      public reportServiceEvent_args getEmptyArgsInstance() {
        return new reportServiceEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PollingResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PollingResult>() { 
          public void onComplete(PollingResult o) {
            reportServiceEvent_result result = new reportServiceEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reportServiceEvent_result result = new reportServiceEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportServiceEvent_args args, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
        iface.reportServiceEvent(args.reportEventRequest,resultHandler);
      }
    }

    public static class initNamespace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initNamespace_args, PollingResult> {
      public initNamespace() {
        super("initNamespace");
      }

      public initNamespace_args getEmptyArgsInstance() {
        return new initNamespace_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PollingResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PollingResult>() { 
          public void onComplete(PollingResult o) {
            initNamespace_result result = new initNamespace_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initNamespace_result result = new initNamespace_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initNamespace_args args, org.apache.thrift.async.AsyncMethodCallback<PollingResult> resultHandler) throws org.apache.thrift.TException {
        iface.initNamespace(args.initNamespaceRequest,resultHandler);
      }
    }

  }

  public static class fetchBreakerRule_args implements org.apache.thrift.TBase<fetchBreakerRule_args, fetchBreakerRule_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchBreakerRule_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchBreakerRule_args");

    private static final org.apache.thrift.protocol.TField SIMPLE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleParam", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchBreakerRule_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchBreakerRule_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SimpleParam simpleParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIMPLE_PARAM((short)1, "simpleParam");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIMPLE_PARAM
            return SIMPLE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIMPLE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("simpleParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "SimpleParam")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchBreakerRule_args.class, metaDataMap);
    }

    public fetchBreakerRule_args() {
    }

    public fetchBreakerRule_args(
      SimpleParam simpleParam)
    {
      this();
      this.simpleParam = simpleParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchBreakerRule_args(fetchBreakerRule_args other) {
      if (other.isSetSimpleParam()) {
        this.simpleParam = new SimpleParam(other.simpleParam);
      }
    }

    public fetchBreakerRule_args deepCopy() {
      return new fetchBreakerRule_args(this);
    }

    @Override
    public void clear() {
      this.simpleParam = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SimpleParam getSimpleParam() {
      return this.simpleParam;
    }

    public fetchBreakerRule_args setSimpleParam(@org.apache.thrift.annotation.Nullable SimpleParam simpleParam) {
      this.simpleParam = simpleParam;
      return this;
    }

    public void unsetSimpleParam() {
      this.simpleParam = null;
    }

    /** Returns true if field simpleParam is set (has been assigned a value) and false otherwise */
    public boolean isSetSimpleParam() {
      return this.simpleParam != null;
    }

    public void setSimpleParamIsSet(boolean value) {
      if (!value) {
        this.simpleParam = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SIMPLE_PARAM:
        if (value == null) {
          unsetSimpleParam();
        } else {
          setSimpleParam((SimpleParam)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIMPLE_PARAM:
        return getSimpleParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIMPLE_PARAM:
        return isSetSimpleParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof fetchBreakerRule_args)
        return this.equals((fetchBreakerRule_args)that);
      return false;
    }

    public boolean equals(fetchBreakerRule_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_simpleParam = true && this.isSetSimpleParam();
      boolean that_present_simpleParam = true && that.isSetSimpleParam();
      if (this_present_simpleParam || that_present_simpleParam) {
        if (!(this_present_simpleParam && that_present_simpleParam))
          return false;
        if (!this.simpleParam.equals(that.simpleParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSimpleParam()) ? 131071 : 524287);
      if (isSetSimpleParam())
        hashCode = hashCode * 8191 + simpleParam.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchBreakerRule_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSimpleParam(), other.isSetSimpleParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimpleParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleParam, other.simpleParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchBreakerRule_args(");
      boolean first = true;

      sb.append("simpleParam:");
      if (this.simpleParam == null) {
        sb.append("null");
      } else {
        sb.append(this.simpleParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchBreakerRule_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchBreakerRule_argsStandardScheme getScheme() {
        return new fetchBreakerRule_argsStandardScheme();
      }
    }

    private static class fetchBreakerRule_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchBreakerRule_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchBreakerRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIMPLE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.simpleParam = new SimpleParam();
                struct.simpleParam.read(iprot);
                struct.setSimpleParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchBreakerRule_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.simpleParam != null) {
          oprot.writeFieldBegin(SIMPLE_PARAM_FIELD_DESC);
          struct.simpleParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchBreakerRule_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchBreakerRule_argsTupleScheme getScheme() {
        return new fetchBreakerRule_argsTupleScheme();
      }
    }

    private static class fetchBreakerRule_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchBreakerRule_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchBreakerRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSimpleParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSimpleParam()) {
          struct.simpleParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchBreakerRule_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.simpleParam = new SimpleParam();
          struct.simpleParam.read(iprot);
          struct.setSimpleParamIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchBreakerRule_result implements org.apache.thrift.TBase<fetchBreakerRule_result, fetchBreakerRule_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchBreakerRule_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchBreakerRule_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchBreakerRule_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchBreakerRule_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PollingResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "PollingResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchBreakerRule_result.class, metaDataMap);
    }

    public fetchBreakerRule_result() {
    }

    public fetchBreakerRule_result(
      PollingResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchBreakerRule_result(fetchBreakerRule_result other) {
      if (other.isSetSuccess()) {
        this.success = new PollingResult(other.success);
      }
    }

    public fetchBreakerRule_result deepCopy() {
      return new fetchBreakerRule_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PollingResult getSuccess() {
      return this.success;
    }

    public fetchBreakerRule_result setSuccess(@org.apache.thrift.annotation.Nullable PollingResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PollingResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof fetchBreakerRule_result)
        return this.equals((fetchBreakerRule_result)that);
      return false;
    }

    public boolean equals(fetchBreakerRule_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchBreakerRule_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchBreakerRule_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchBreakerRule_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchBreakerRule_resultStandardScheme getScheme() {
        return new fetchBreakerRule_resultStandardScheme();
      }
    }

    private static class fetchBreakerRule_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchBreakerRule_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchBreakerRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PollingResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchBreakerRule_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchBreakerRule_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchBreakerRule_resultTupleScheme getScheme() {
        return new fetchBreakerRule_resultTupleScheme();
      }
    }

    private static class fetchBreakerRule_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchBreakerRule_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchBreakerRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchBreakerRule_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PollingResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reportServiceApi_args implements org.apache.thrift.TBase<reportServiceApi_args, reportServiceApi_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportServiceApi_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportServiceApi_args");

    private static final org.apache.thrift.protocol.TField SERVICE_API_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceApiRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reportServiceApi_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reportServiceApi_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ServiceApiRequest serviceApiRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_API_REQUEST((short)1, "serviceApiRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_API_REQUEST
            return SERVICE_API_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_API_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("serviceApiRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "ServiceApiRequest")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportServiceApi_args.class, metaDataMap);
    }

    public reportServiceApi_args() {
    }

    public reportServiceApi_args(
      ServiceApiRequest serviceApiRequest)
    {
      this();
      this.serviceApiRequest = serviceApiRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportServiceApi_args(reportServiceApi_args other) {
      if (other.isSetServiceApiRequest()) {
        this.serviceApiRequest = new ServiceApiRequest(other.serviceApiRequest);
      }
    }

    public reportServiceApi_args deepCopy() {
      return new reportServiceApi_args(this);
    }

    @Override
    public void clear() {
      this.serviceApiRequest = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ServiceApiRequest getServiceApiRequest() {
      return this.serviceApiRequest;
    }

    public reportServiceApi_args setServiceApiRequest(@org.apache.thrift.annotation.Nullable ServiceApiRequest serviceApiRequest) {
      this.serviceApiRequest = serviceApiRequest;
      return this;
    }

    public void unsetServiceApiRequest() {
      this.serviceApiRequest = null;
    }

    /** Returns true if field serviceApiRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceApiRequest() {
      return this.serviceApiRequest != null;
    }

    public void setServiceApiRequestIsSet(boolean value) {
      if (!value) {
        this.serviceApiRequest = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SERVICE_API_REQUEST:
        if (value == null) {
          unsetServiceApiRequest();
        } else {
          setServiceApiRequest((ServiceApiRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_API_REQUEST:
        return getServiceApiRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_API_REQUEST:
        return isSetServiceApiRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reportServiceApi_args)
        return this.equals((reportServiceApi_args)that);
      return false;
    }

    public boolean equals(reportServiceApi_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serviceApiRequest = true && this.isSetServiceApiRequest();
      boolean that_present_serviceApiRequest = true && that.isSetServiceApiRequest();
      if (this_present_serviceApiRequest || that_present_serviceApiRequest) {
        if (!(this_present_serviceApiRequest && that_present_serviceApiRequest))
          return false;
        if (!this.serviceApiRequest.equals(that.serviceApiRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetServiceApiRequest()) ? 131071 : 524287);
      if (isSetServiceApiRequest())
        hashCode = hashCode * 8191 + serviceApiRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reportServiceApi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetServiceApiRequest(), other.isSetServiceApiRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceApiRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceApiRequest, other.serviceApiRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportServiceApi_args(");
      boolean first = true;

      sb.append("serviceApiRequest:");
      if (this.serviceApiRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceApiRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportServiceApi_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceApi_argsStandardScheme getScheme() {
        return new reportServiceApi_argsStandardScheme();
      }
    }

    private static class reportServiceApi_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reportServiceApi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportServiceApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_API_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceApiRequest = new ServiceApiRequest();
                struct.serviceApiRequest.read(iprot);
                struct.setServiceApiRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportServiceApi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceApiRequest != null) {
          oprot.writeFieldBegin(SERVICE_API_REQUEST_FIELD_DESC);
          struct.serviceApiRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportServiceApi_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceApi_argsTupleScheme getScheme() {
        return new reportServiceApi_argsTupleScheme();
      }
    }

    private static class reportServiceApi_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reportServiceApi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportServiceApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServiceApiRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServiceApiRequest()) {
          struct.serviceApiRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportServiceApi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.serviceApiRequest = new ServiceApiRequest();
          struct.serviceApiRequest.read(iprot);
          struct.setServiceApiRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reportServiceApi_result implements org.apache.thrift.TBase<reportServiceApi_result, reportServiceApi_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportServiceApi_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportServiceApi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reportServiceApi_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reportServiceApi_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PollingResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "PollingResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportServiceApi_result.class, metaDataMap);
    }

    public reportServiceApi_result() {
    }

    public reportServiceApi_result(
      PollingResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportServiceApi_result(reportServiceApi_result other) {
      if (other.isSetSuccess()) {
        this.success = new PollingResult(other.success);
      }
    }

    public reportServiceApi_result deepCopy() {
      return new reportServiceApi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PollingResult getSuccess() {
      return this.success;
    }

    public reportServiceApi_result setSuccess(@org.apache.thrift.annotation.Nullable PollingResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PollingResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reportServiceApi_result)
        return this.equals((reportServiceApi_result)that);
      return false;
    }

    public boolean equals(reportServiceApi_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reportServiceApi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportServiceApi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportServiceApi_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceApi_resultStandardScheme getScheme() {
        return new reportServiceApi_resultStandardScheme();
      }
    }

    private static class reportServiceApi_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reportServiceApi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportServiceApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PollingResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportServiceApi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportServiceApi_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceApi_resultTupleScheme getScheme() {
        return new reportServiceApi_resultTupleScheme();
      }
    }

    private static class reportServiceApi_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reportServiceApi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportServiceApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportServiceApi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PollingResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reportServiceEvent_args implements org.apache.thrift.TBase<reportServiceEvent_args, reportServiceEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportServiceEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportServiceEvent_args");

    private static final org.apache.thrift.protocol.TField REPORT_EVENT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("reportEventRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reportServiceEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reportServiceEvent_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ReportEventRequest reportEventRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_EVENT_REQUEST((short)1, "reportEventRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_EVENT_REQUEST
            return REPORT_EVENT_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_EVENT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("reportEventRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "ReportEventRequest")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportServiceEvent_args.class, metaDataMap);
    }

    public reportServiceEvent_args() {
    }

    public reportServiceEvent_args(
      ReportEventRequest reportEventRequest)
    {
      this();
      this.reportEventRequest = reportEventRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportServiceEvent_args(reportServiceEvent_args other) {
      if (other.isSetReportEventRequest()) {
        this.reportEventRequest = new ReportEventRequest(other.reportEventRequest);
      }
    }

    public reportServiceEvent_args deepCopy() {
      return new reportServiceEvent_args(this);
    }

    @Override
    public void clear() {
      this.reportEventRequest = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ReportEventRequest getReportEventRequest() {
      return this.reportEventRequest;
    }

    public reportServiceEvent_args setReportEventRequest(@org.apache.thrift.annotation.Nullable ReportEventRequest reportEventRequest) {
      this.reportEventRequest = reportEventRequest;
      return this;
    }

    public void unsetReportEventRequest() {
      this.reportEventRequest = null;
    }

    /** Returns true if field reportEventRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetReportEventRequest() {
      return this.reportEventRequest != null;
    }

    public void setReportEventRequestIsSet(boolean value) {
      if (!value) {
        this.reportEventRequest = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case REPORT_EVENT_REQUEST:
        if (value == null) {
          unsetReportEventRequest();
        } else {
          setReportEventRequest((ReportEventRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_EVENT_REQUEST:
        return getReportEventRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_EVENT_REQUEST:
        return isSetReportEventRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reportServiceEvent_args)
        return this.equals((reportServiceEvent_args)that);
      return false;
    }

    public boolean equals(reportServiceEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reportEventRequest = true && this.isSetReportEventRequest();
      boolean that_present_reportEventRequest = true && that.isSetReportEventRequest();
      if (this_present_reportEventRequest || that_present_reportEventRequest) {
        if (!(this_present_reportEventRequest && that_present_reportEventRequest))
          return false;
        if (!this.reportEventRequest.equals(that.reportEventRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetReportEventRequest()) ? 131071 : 524287);
      if (isSetReportEventRequest())
        hashCode = hashCode * 8191 + reportEventRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reportServiceEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetReportEventRequest(), other.isSetReportEventRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportEventRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportEventRequest, other.reportEventRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportServiceEvent_args(");
      boolean first = true;

      sb.append("reportEventRequest:");
      if (this.reportEventRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.reportEventRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportServiceEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceEvent_argsStandardScheme getScheme() {
        return new reportServiceEvent_argsStandardScheme();
      }
    }

    private static class reportServiceEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reportServiceEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportServiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_EVENT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.reportEventRequest = new ReportEventRequest();
                struct.reportEventRequest.read(iprot);
                struct.setReportEventRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportServiceEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.reportEventRequest != null) {
          oprot.writeFieldBegin(REPORT_EVENT_REQUEST_FIELD_DESC);
          struct.reportEventRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportServiceEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceEvent_argsTupleScheme getScheme() {
        return new reportServiceEvent_argsTupleScheme();
      }
    }

    private static class reportServiceEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reportServiceEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportServiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetReportEventRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportEventRequest()) {
          struct.reportEventRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportServiceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportEventRequest = new ReportEventRequest();
          struct.reportEventRequest.read(iprot);
          struct.setReportEventRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reportServiceEvent_result implements org.apache.thrift.TBase<reportServiceEvent_result, reportServiceEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportServiceEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportServiceEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reportServiceEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reportServiceEvent_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PollingResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "PollingResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportServiceEvent_result.class, metaDataMap);
    }

    public reportServiceEvent_result() {
    }

    public reportServiceEvent_result(
      PollingResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportServiceEvent_result(reportServiceEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new PollingResult(other.success);
      }
    }

    public reportServiceEvent_result deepCopy() {
      return new reportServiceEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PollingResult getSuccess() {
      return this.success;
    }

    public reportServiceEvent_result setSuccess(@org.apache.thrift.annotation.Nullable PollingResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PollingResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reportServiceEvent_result)
        return this.equals((reportServiceEvent_result)that);
      return false;
    }

    public boolean equals(reportServiceEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reportServiceEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportServiceEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportServiceEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceEvent_resultStandardScheme getScheme() {
        return new reportServiceEvent_resultStandardScheme();
      }
    }

    private static class reportServiceEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reportServiceEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportServiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PollingResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportServiceEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportServiceEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reportServiceEvent_resultTupleScheme getScheme() {
        return new reportServiceEvent_resultTupleScheme();
      }
    }

    private static class reportServiceEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reportServiceEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportServiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportServiceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PollingResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initNamespace_args implements org.apache.thrift.TBase<initNamespace_args, initNamespace_args._Fields>, java.io.Serializable, Cloneable, Comparable<initNamespace_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initNamespace_args");

    private static final org.apache.thrift.protocol.TField INIT_NAMESPACE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("initNamespaceRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initNamespace_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initNamespace_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InitNamespaceRequest initNamespaceRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INIT_NAMESPACE_REQUEST((short)1, "initNamespaceRequest");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INIT_NAMESPACE_REQUEST
            return INIT_NAMESPACE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INIT_NAMESPACE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("initNamespaceRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "InitNamespaceRequest")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initNamespace_args.class, metaDataMap);
    }

    public initNamespace_args() {
    }

    public initNamespace_args(
      InitNamespaceRequest initNamespaceRequest)
    {
      this();
      this.initNamespaceRequest = initNamespaceRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initNamespace_args(initNamespace_args other) {
      if (other.isSetInitNamespaceRequest()) {
        this.initNamespaceRequest = new InitNamespaceRequest(other.initNamespaceRequest);
      }
    }

    public initNamespace_args deepCopy() {
      return new initNamespace_args(this);
    }

    @Override
    public void clear() {
      this.initNamespaceRequest = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InitNamespaceRequest getInitNamespaceRequest() {
      return this.initNamespaceRequest;
    }

    public initNamespace_args setInitNamespaceRequest(@org.apache.thrift.annotation.Nullable InitNamespaceRequest initNamespaceRequest) {
      this.initNamespaceRequest = initNamespaceRequest;
      return this;
    }

    public void unsetInitNamespaceRequest() {
      this.initNamespaceRequest = null;
    }

    /** Returns true if field initNamespaceRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetInitNamespaceRequest() {
      return this.initNamespaceRequest != null;
    }

    public void setInitNamespaceRequestIsSet(boolean value) {
      if (!value) {
        this.initNamespaceRequest = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case INIT_NAMESPACE_REQUEST:
        if (value == null) {
          unsetInitNamespaceRequest();
        } else {
          setInitNamespaceRequest((InitNamespaceRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INIT_NAMESPACE_REQUEST:
        return getInitNamespaceRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INIT_NAMESPACE_REQUEST:
        return isSetInitNamespaceRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initNamespace_args)
        return this.equals((initNamespace_args)that);
      return false;
    }

    public boolean equals(initNamespace_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_initNamespaceRequest = true && this.isSetInitNamespaceRequest();
      boolean that_present_initNamespaceRequest = true && that.isSetInitNamespaceRequest();
      if (this_present_initNamespaceRequest || that_present_initNamespaceRequest) {
        if (!(this_present_initNamespaceRequest && that_present_initNamespaceRequest))
          return false;
        if (!this.initNamespaceRequest.equals(that.initNamespaceRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInitNamespaceRequest()) ? 131071 : 524287);
      if (isSetInitNamespaceRequest())
        hashCode = hashCode * 8191 + initNamespaceRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initNamespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetInitNamespaceRequest(), other.isSetInitNamespaceRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitNamespaceRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initNamespaceRequest, other.initNamespaceRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initNamespace_args(");
      boolean first = true;

      sb.append("initNamespaceRequest:");
      if (this.initNamespaceRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.initNamespaceRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initNamespace_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initNamespace_argsStandardScheme getScheme() {
        return new initNamespace_argsStandardScheme();
      }
    }

    private static class initNamespace_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initNamespace_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INIT_NAMESPACE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.initNamespaceRequest = new InitNamespaceRequest();
                struct.initNamespaceRequest.read(iprot);
                struct.setInitNamespaceRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initNamespace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.initNamespaceRequest != null) {
          oprot.writeFieldBegin(INIT_NAMESPACE_REQUEST_FIELD_DESC);
          struct.initNamespaceRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initNamespace_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initNamespace_argsTupleScheme getScheme() {
        return new initNamespace_argsTupleScheme();
      }
    }

    private static class initNamespace_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initNamespace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInitNamespaceRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInitNamespaceRequest()) {
          struct.initNamespaceRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initNamespace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.initNamespaceRequest = new InitNamespaceRequest();
          struct.initNamespaceRequest.read(iprot);
          struct.setInitNamespaceRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initNamespace_result implements org.apache.thrift.TBase<initNamespace_result, initNamespace_result._Fields>, java.io.Serializable, Cloneable, Comparable<initNamespace_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initNamespace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initNamespace_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initNamespace_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable PollingResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "PollingResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initNamespace_result.class, metaDataMap);
    }

    public initNamespace_result() {
    }

    public initNamespace_result(
      PollingResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initNamespace_result(initNamespace_result other) {
      if (other.isSetSuccess()) {
        this.success = new PollingResult(other.success);
      }
    }

    public initNamespace_result deepCopy() {
      return new initNamespace_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public PollingResult getSuccess() {
      return this.success;
    }

    public initNamespace_result setSuccess(@org.apache.thrift.annotation.Nullable PollingResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PollingResult)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initNamespace_result)
        return this.equals((initNamespace_result)that);
      return false;
    }

    public boolean equals(initNamespace_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initNamespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initNamespace_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initNamespace_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initNamespace_resultStandardScheme getScheme() {
        return new initNamespace_resultStandardScheme();
      }
    }

    private static class initNamespace_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initNamespace_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PollingResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initNamespace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initNamespace_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initNamespace_resultTupleScheme getScheme() {
        return new initNamespace_resultTupleScheme();
      }
    }

    private static class initNamespace_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initNamespace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initNamespace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PollingResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
